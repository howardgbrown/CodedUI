// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uISearchByNonMaskEdit = this.UISelectPatientWindow.UISearchByNonMaskWindow.UISearchByNonMaskEdit;
            WinCell uIBrentCell = this.UISelectPatientWindow.UIUltraGridWindow.UIUltraGridTable.UIEntityCollection1rowRow.UIBrentCell;
            WinButton uIOKButton = this.UISelectPatientWindow.UIOKWindow.UIOKButton;
            WinCheckBox uIDoNotShowThisAlertAgCheckBox = this.UIFamilyAlertCrosbyBreWindow.UIDoNotShowThisAlertAgWindow.UIDoNotShowThisAlertAgCheckBox;
            WinButton uIOKButton1 = this.UIFamilyAlertCrosbyBreWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIEnterPaymentMenuItem = this.UIDentrixLedgerCrosbyBWindow.UIApplicationMenuBar.UITransactionMenuItem.UIEnterPaymentMenuItem;
            WinButton uIPaymentSettingsButton = this.UIEnterPaymentWindow.UIPaymentSettingsWindow.UIPaymentSettingsButton;
            WinMenuItem uIDentrixPaySetupMenuItem = this.UIItemWindow.UIDropDownMenu.UIDentrixPaySetupMenuItem;
            WinButton uISetupUpdateDeviceConButton = this.UIDentrixPaySetupWindow.UISetupUpdateDeviceConWindow.UISetupUpdateDeviceConButton;
            WinButton uIOKButton2 = this.UIDentrixPayWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton3 = this.UISetuporUpdateDeviceCWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton4 = this.UIDentrixPaySetupWindow.UIOKWindow.UIOKButton;
            WinButton uICancelButton = this.UIEnterPaymentWindow.UICancelWindow.UICancelButton;
            WinMenuItem uIExitMenuItem = this.UIDentrixLedgerCrosbyBWindow.UIApplicationMenuBar.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Launch '%ProgramFiles%\Dentrix\Ledger.exe'
            ApplicationUnderTest uIDentrixLedgerCrosbyBWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIDentrixLedgerCrosbyBWindowExePath, this.RecordedMethod1Params.UIDentrixLedgerCrosbyBWindowAlternateExePath);

            // Type 'crosby' in 'searchByNonMask' text box
            uISearchByNonMaskEdit.Text = this.RecordedMethod1Params.UISearchByNonMaskEditText;

            // Click 'Brent' cell
            Mouse.Click(uIBrentCell, new Point(20, 4));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 6));

            if (
                this.UIFamilyAlertCrosbyBreWindow.Exists

                )
            {
            // Select '&Do Not Show This Alert Again Today' check box
            uIDoNotShowThisAlertAgCheckBox.Checked = this.RecordedMethod1Params.UIDoNotShowThisAlertAgCheckBoxChecked;

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(27, 9));
            }



            // Click 'Transaction' -> 'Enter Payment...' menu item
            Mouse.Click(uIEnterPaymentMenuItem, new Point(50, 18));

            // Click 'Payment Settings' button
            Mouse.Click(uIPaymentSettingsButton, new Point(50, 12));

            // Click 'Dentrix Pay Setup' menu item
            Mouse.Click(uIDentrixPaySetupMenuItem, new Point(50, 12));

            // Click 'Setup/Update Device Connected to this PC' button
            Mouse.Click(uISetupUpdateDeviceConButton, new Point(108, 7));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(45, 8));

            // Adding a pause for the device to connect
            this.UISetuporUpdateDeviceCWindow.WaitForControlExist();

            // Click 'OK' button
            Mouse.Click(uIOKButton3, new Point(43, 7));

            // Adding a pause for the device to connect
            this.UISetuporUpdateDeviceCWindow.WaitForControlNotExist();

            // Click 'OK' button
            Mouse.Click(uIOKButton4, new Point(23, 15));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(25, 11));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(70, 16));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIDentrixLedgerCrosbyBWindow UIDentrixLedgerCrosbyBWindow
        {
            get
            {
                if ((this.mUIDentrixLedgerCrosbyBWindow == null))
                {
                    this.mUIDentrixLedgerCrosbyBWindow = new UIDentrixLedgerCrosbyBWindow();
                }
                return this.mUIDentrixLedgerCrosbyBWindow;
            }
        }
        
        public UISelectPatientWindow UISelectPatientWindow
        {
            get
            {
                if ((this.mUISelectPatientWindow == null))
                {
                    this.mUISelectPatientWindow = new UISelectPatientWindow();
                }
                return this.mUISelectPatientWindow;
            }
        }
        
        public UIFamilyAlertCrosbyBreWindow UIFamilyAlertCrosbyBreWindow
        {
            get
            {
                if ((this.mUIFamilyAlertCrosbyBreWindow == null))
                {
                    this.mUIFamilyAlertCrosbyBreWindow = new UIFamilyAlertCrosbyBreWindow();
                }
                return this.mUIFamilyAlertCrosbyBreWindow;
            }
        }
        
        public UIEnterPaymentWindow UIEnterPaymentWindow
        {
            get
            {
                if ((this.mUIEnterPaymentWindow == null))
                {
                    this.mUIEnterPaymentWindow = new UIEnterPaymentWindow();
                }
                return this.mUIEnterPaymentWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDentrixPaySetupWindow UIDentrixPaySetupWindow
        {
            get
            {
                if ((this.mUIDentrixPaySetupWindow == null))
                {
                    this.mUIDentrixPaySetupWindow = new UIDentrixPaySetupWindow();
                }
                return this.mUIDentrixPaySetupWindow;
            }
        }
        
        public UIDentrixPayWindow UIDentrixPayWindow
        {
            get
            {
                if ((this.mUIDentrixPayWindow == null))
                {
                    this.mUIDentrixPayWindow = new UIDentrixPayWindow();
                }
                return this.mUIDentrixPayWindow;
            }
        }
        
        public UISetuporUpdateDeviceCWindow UISetuporUpdateDeviceCWindow
        {
            get
            {
                if ((this.mUISetuporUpdateDeviceCWindow == null))
                {
                    this.mUISetuporUpdateDeviceCWindow = new UISetuporUpdateDeviceCWindow();
                }
                return this.mUISetuporUpdateDeviceCWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIDentrixLedgerCrosbyBWindow mUIDentrixLedgerCrosbyBWindow;
        
        private UISelectPatientWindow mUISelectPatientWindow;
        
        private UIFamilyAlertCrosbyBreWindow mUIFamilyAlertCrosbyBreWindow;
        
        private UIEnterPaymentWindow mUIEnterPaymentWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIDentrixPaySetupWindow mUIDentrixPaySetupWindow;
        
        private UIDentrixPayWindow mUIDentrixPayWindow;
        
        private UISetuporUpdateDeviceCWindow mUISetuporUpdateDeviceCWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramFiles%\Dentrix\Ledger.exe'
        /// </summary>
        public string UIDentrixLedgerCrosbyBWindowExePath = "C:\\Program Files (x86)\\Dentrix\\Ledger.exe";
        
        /// <summary>
        /// Launch '%ProgramFiles%\Dentrix\Ledger.exe'
        /// </summary>
        public string UIDentrixLedgerCrosbyBWindowAlternateExePath = "%ProgramFiles%\\Dentrix\\Ledger.exe";
        
        /// <summary>
        /// Type 'crosby' in 'searchByNonMask' text box
        /// </summary>
        public string UISearchByNonMaskEditText = "crosby";
        
        /// <summary>
        /// Select '&Do Not Show This Alert Again Today' check box
        /// </summary>
        public bool UIDoNotShowThisAlertAgCheckBoxChecked = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDentrixLedgerCrosbyBWindow : WinWindow
    {
        
        public UIDentrixLedgerCrosbyBWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Dentrix Ledger - Crosby, Brent L [CR001]";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Mledger";
            this.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
            #endregion
        }
        
        #region Properties
        public UIApplicationMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new UIApplicationMenuBar(this);
                }
                return this.mUIApplicationMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIApplicationMenuBar mUIApplicationMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIApplicationMenuBar : WinMenuBar
    {
        
        public UIApplicationMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
            #endregion
        }
        
        #region Properties
        public UITransactionMenuItem UITransactionMenuItem
        {
            get
            {
                if ((this.mUITransactionMenuItem == null))
                {
                    this.mUITransactionMenuItem = new UITransactionMenuItem(this);
                }
                return this.mUITransactionMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UITransactionMenuItem mUITransactionMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITransactionMenuItem : WinMenuItem
    {
        
        public UITransactionMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Transaction";
            this.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIEnterPaymentMenuItem
        {
            get
            {
                if ((this.mUIEnterPaymentMenuItem == null))
                {
                    this.mUIEnterPaymentMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEnterPaymentMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Enter Payment...";
                    this.mUIEnterPaymentMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEnterPaymentMenuItem.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
                    #endregion
                }
                return this.mUIEnterPaymentMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIEnterPaymentMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Dentrix Ledger - Crosby, Brent L [CR001]");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectPatientWindow : WinWindow
    {
        
        public UISelectPatientWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select Patient";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public UISearchByNonMaskWindow UISearchByNonMaskWindow
        {
            get
            {
                if ((this.mUISearchByNonMaskWindow == null))
                {
                    this.mUISearchByNonMaskWindow = new UISearchByNonMaskWindow(this);
                }
                return this.mUISearchByNonMaskWindow;
            }
        }
        
        public UIUltraGridWindow UIUltraGridWindow
        {
            get
            {
                if ((this.mUIUltraGridWindow == null))
                {
                    this.mUIUltraGridWindow = new UIUltraGridWindow(this);
                }
                return this.mUIUltraGridWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISearchByNonMaskWindow mUISearchByNonMaskWindow;
        
        private UIUltraGridWindow mUIUltraGridWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISearchByNonMaskWindow : WinWindow
    {
        
        public UISearchByNonMaskWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "searchByNonMask";
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public WinEdit UISearchByNonMaskEdit
        {
            get
            {
                if ((this.mUISearchByNonMaskEdit == null))
                {
                    this.mUISearchByNonMaskEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISearchByNonMaskEdit.WindowTitles.Add("Select Patient");
                    #endregion
                }
                return this.mUISearchByNonMaskEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISearchByNonMaskEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUltraGridWindow : WinWindow
    {
        
        public UIUltraGridWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ultraGrid";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public UIUltraGridTable UIUltraGridTable
        {
            get
            {
                if ((this.mUIUltraGridTable == null))
                {
                    this.mUIUltraGridTable = new UIUltraGridTable(this);
                }
                return this.mUIUltraGridTable;
            }
        }
        #endregion
        
        #region Fields
        private UIUltraGridTable mUIUltraGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUltraGridTable : WinTable
    {
        
        public UIUltraGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTable.PropertyNames.Name] = "ultraGrid";
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public UIEntityCollection1rowRow UIEntityCollection1rowRow
        {
            get
            {
                if ((this.mUIEntityCollection1rowRow == null))
                {
                    this.mUIEntityCollection1rowRow = new UIEntityCollection1rowRow(this);
                }
                return this.mUIEntityCollection1rowRow;
            }
        }
        #endregion
        
        #region Fields
        private UIEntityCollection1rowRow mUIEntityCollection1rowRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEntityCollection1rowRow : WinRow
    {
        
        public UIEntityCollection1rowRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinRow.PropertyNames.Name] = "EntityCollection`1 row 10";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public WinCell UIBrentCell
        {
            get
            {
                if ((this.mUIBrentCell == null))
                {
                    this.mUIBrentCell = new WinCell(this);
                    #region Search Criteria
                    this.mUIBrentCell.SearchProperties[WinCell.PropertyNames.Value] = "Brent";
                    this.mUIBrentCell.WindowTitles.Add("Select Patient");
                    #endregion
                }
                return this.mUIBrentCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIBrentCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Select Patient");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Select Patient");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFamilyAlertCrosbyBreWindow : WinWindow
    {
        
        public UIFamilyAlertCrosbyBreWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Family Alert - Crosby, Brent L";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Family Alert - Crosby, Brent L");
            #endregion
        }
        
        #region Properties
        public UIDoNotShowThisAlertAgWindow UIDoNotShowThisAlertAgWindow
        {
            get
            {
                if ((this.mUIDoNotShowThisAlertAgWindow == null))
                {
                    this.mUIDoNotShowThisAlertAgWindow = new UIDoNotShowThisAlertAgWindow(this);
                }
                return this.mUIDoNotShowThisAlertAgWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDoNotShowThisAlertAgWindow mUIDoNotShowThisAlertAgWindow;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDoNotShowThisAlertAgWindow : WinWindow
    {
        
        public UIDoNotShowThisAlertAgWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1015";
            this.WindowTitles.Add("Family Alert - Crosby, Brent L");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDoNotShowThisAlertAgCheckBox
        {
            get
            {
                if ((this.mUIDoNotShowThisAlertAgCheckBox == null))
                {
                    this.mUIDoNotShowThisAlertAgCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDoNotShowThisAlertAgCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Do Not Show This Alert Again Today";
                    this.mUIDoNotShowThisAlertAgCheckBox.WindowTitles.Add("Family Alert - Crosby, Brent L");
                    #endregion
                }
                return this.mUIDoNotShowThisAlertAgCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDoNotShowThisAlertAgCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Family Alert - Crosby, Brent L");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Family Alert - Crosby, Brent L");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnterPaymentWindow : WinWindow
    {
        
        public UIEnterPaymentWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Enter Payment";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Enter Payment");
            #endregion
        }
        
        #region Properties
        public UIPaymentSettingsWindow UIPaymentSettingsWindow
        {
            get
            {
                if ((this.mUIPaymentSettingsWindow == null))
                {
                    this.mUIPaymentSettingsWindow = new UIPaymentSettingsWindow(this);
                }
                return this.mUIPaymentSettingsWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIPaymentSettingsWindow mUIPaymentSettingsWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPaymentSettingsWindow : WinWindow
    {
        
        public UIPaymentSettingsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "button1";
            this.WindowTitles.Add("Enter Payment");
            #endregion
        }
        
        #region Properties
        public WinButton UIPaymentSettingsButton
        {
            get
            {
                if ((this.mUIPaymentSettingsButton == null))
                {
                    this.mUIPaymentSettingsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIPaymentSettingsButton.SearchProperties[WinButton.PropertyNames.Name] = "Payment Settings";
                    this.mUIPaymentSettingsButton.WindowTitles.Add("Enter Payment");
                    #endregion
                }
                return this.mUIPaymentSettingsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIPaymentSettingsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnCancel";
            this.WindowTitles.Add("Enter Payment");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Enter Payment");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDropDownMenu UIDropDownMenu
        {
            get
            {
                if ((this.mUIDropDownMenu == null))
                {
                    this.mUIDropDownMenu = new UIDropDownMenu(this);
                }
                return this.mUIDropDownMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIDropDownMenu mUIDropDownMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDropDownMenu : WinMenu
    {
        
        public UIDropDownMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "DropDown";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIDentrixPaySetupMenuItem
        {
            get
            {
                if ((this.mUIDentrixPaySetupMenuItem == null))
                {
                    this.mUIDentrixPaySetupMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIDentrixPaySetupMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Dentrix Pay Setup";
                    #endregion
                }
                return this.mUIDentrixPaySetupMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIDentrixPaySetupMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDentrixPaySetupWindow : WinWindow
    {
        
        public UIDentrixPaySetupWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Dentrix Pay Setup";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Dentrix Pay Setup");
            #endregion
        }
        
        #region Properties
        public UISetupUpdateDeviceConWindow UISetupUpdateDeviceConWindow
        {
            get
            {
                if ((this.mUISetupUpdateDeviceConWindow == null))
                {
                    this.mUISetupUpdateDeviceConWindow = new UISetupUpdateDeviceConWindow(this);
                }
                return this.mUISetupUpdateDeviceConWindow;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISetupUpdateDeviceConWindow mUISetupUpdateDeviceConWindow;
        
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISetupUpdateDeviceConWindow : WinWindow
    {
        
        public UISetupUpdateDeviceConWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonManageConnectedDevice";
            this.WindowTitles.Add("Dentrix Pay Setup");
            #endregion
        }
        
        #region Properties
        public WinButton UISetupUpdateDeviceConButton
        {
            get
            {
                if ((this.mUISetupUpdateDeviceConButton == null))
                {
                    this.mUISetupUpdateDeviceConButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetupUpdateDeviceConButton.SearchProperties[WinButton.PropertyNames.Name] = "Setup/Update Device Connected to this PC";
                    this.mUISetupUpdateDeviceConButton.WindowTitles.Add("Dentrix Pay Setup");
                    #endregion
                }
                return this.mUISetupUpdateDeviceConButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetupUpdateDeviceConButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonSave";
            this.WindowTitles.Add("Dentrix Pay Setup");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Dentrix Pay Setup");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDentrixPayWindow : WinWindow
    {
        
        public UIDentrixPayWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Dentrix Pay";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Dentrix Pay");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Dentrix Pay");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Dentrix Pay");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISetuporUpdateDeviceCWindow : WinWindow
    {
        
        public UISetuporUpdateDeviceCWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Setup or Update Device Connected to this PC";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Setup or Update Device Connected to this PC");
            #endregion
        }
        
        #region Properties
        public UIOKWindow4 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow4(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow4 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow4 : WinWindow
    {
        
        public UIOKWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "buttonOk";
            this.WindowTitles.Add("Setup or Update Device Connected to this PC");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Setup or Update Device Connected to this PC");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
